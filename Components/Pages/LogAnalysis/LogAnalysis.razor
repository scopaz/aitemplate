@page "/log-analysis"
@using System.Text.Json
@using anomalieDetectionLog.Services.Loki
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Markdig
@using Microsoft.AspNetCore.Components.Web
@inject LogAnalysisService LogAnalysisService
@inject LokiClient LokiClient

<style>
    /* Page Layout */
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem;
        border: 2px solid green;
    }

    .page-title {
        font-size: 1.875rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
    }

    /* Card Styling */
    .card {
        margin-bottom: 2rem;
        background-color: white;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border-radius: 0.5rem;
        padding: 1.5rem;
    }

    .card-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    /* Form Controls */
    .form-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .form-grid-three {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        color: #4b5563;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem 0.75rem;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
    }

    .form-select {
        padding: 0.5rem 0.75rem;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
    }

    .help-text {
        color: #6b7280;
        font-size: 0.875rem;
    }

    .time-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.5rem;
    }

    /* Buttons */
    .button-group {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .btn {
        padding: 0.5rem 1.5rem;
        border: none;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
    }

    .btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .btn-primary {
        background-color: #2563eb;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #1d4ed8;
    }

    .btn-success {
        background-color: #16a34a;
        color: white;
    }

    .btn-success:hover:not(:disabled) {
        background-color: #15803d;
    }

    .btn-info {
        background-color: #7e22ce;
        color: white;
    }

    .btn-info:hover:not(:disabled) {
        background-color: #6b21a8;
    }

    .btn-secondary {
        background-color: #4b5563;
        color: white;
    }

    .btn-secondary:hover:not(:disabled) {
        background-color: #374151;
    }

    /* Spinner */
    .spinner-container {
        display: inline-block;
        margin-right: 0.5rem;
    }

    /* Error Message */
    .error-message {
        padding: 1rem;
        background-color: #fee2e2;
        color: #b91c1c;
        border-radius: 0.375rem;
        margin-bottom: 1rem;
    }

    /* Labels Section */
    .labels-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .label {
        padding: 0.25rem 0.75rem;
        background-color: #dbeafe;
        color: #1e40af;
        border-radius: 9999px;
        font-size: 0.875rem;
    }

    /* Analysis Results */
    .result-item {
        margin-bottom: 1rem;
    }

    .analysis-content {
        border-top: 1px solid #e5e7eb;
        padding-top: 1rem;
    }

    /* Prose styling for markdown content */
    .prose {
        font-size: 1rem;
        line-height: 1.75;
    }

    .prose h1 {
        font-size: 2em;
        font-weight: 700;
        margin-top: 1.5em;
        margin-bottom: 0.5em;
    }

    .prose h2 {
        font-size: 1.5em;
        font-weight: 700;
        margin-top: 1.25em;
        margin-bottom: 0.5em;
    }

    .prose h3 {
        font-size: 1.25em;
        font-weight: 600;
        margin-top: 1.25em;
        margin-bottom: 0.5em;
    }

    .prose p {
        margin-top: 1em;
        margin-bottom: 1em;
    }

    .prose ul {
        list-style-type: disc;
        margin-top: 0.5em;
        margin-bottom: 0.5em;
        padding-left: 1.5em;
    }

    .prose ol {
        list-style-type: decimal;
        margin-top: 0.5em;
        margin-bottom: 0.5em;
        padding-left: 1.5em;
    }

</style>

<PageTitle>Loki Log Analysis</PageTitle>

<div class="page-container">
    <h1 class="page-title">Loki Log Analysis</h1>
    
    <div class="card">
        <h2 class="card-title">Query Parameters</h2>
        
        <EditForm Model="@_queryParams" OnValidSubmit="HandleSubmit">
            <div class="form-grid">
                <div>
                    <label class="form-label" for="logQuery">
                        LogQL 
                    </label>
                    <InputTextArea 
                        id="logQuery" 
                        class="form-control" 
                        @bind-Value="_queryParams.LogQuery"
                        rows="3" />
                    <small class="help-text">Example: {app="anomalie-detection"} | json</small>
                </div>
                
                <div>
                    <label class="form-label" for="analysisPrompt">
                        Analysis Prompt (Optional)
                    </label>
                    <InputTextArea 
                        id="analysisPrompt" 
                        class="form-control" 
                        @bind-Value="_queryParams.AnalysisPrompt"
                        rows="3" />
                    <small class="help-text">Specific instructions for AI analysis</small>
                </div>
            </div>
            
            <div class="form-grid-three">
                <div>
                    <label class="form-label" for="startTime">
                        Start Time
                    </label>
                    <InputDate 
                        id="startTime" 
                        class="form-control" 
                        @bind-Value="_queryParams.StartDate" />
                </div>
                
                <div>
                    <label class="form-label" for="startTimeHours">
                        Time
                    </label>
                    <div class="time-grid">
                        <InputSelect 
                            id="startTimeHours" 
                            class="form-select" 
                            @bind-Value="_queryParams.StartHour">
                            @for (int i = 0; i < 24; i++)
                            {
                                <option value="@i">@i.ToString("00")</option>
                            }
                        </InputSelect>
                        <InputSelect 
                            id="startTimeMinutes" 
                            class="form-select" 
                            @bind-Value="_queryParams.StartMinute">
                            @for (int i = 0; i < 60; i += 5)
                            {
                                <option value="@i">@i.ToString("00")</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                
                <div>
                    <label class="form-label" for="logLimit">
                        Log Limit
                    </label>
                    <InputNumber 
                        id="logLimit" 
                        class="form-control" 
                        @bind-Value="_queryParams.LogLimit" />
                </div>
            </div>
            
            <div class="button-group">
                <button 
                    type="submit" 
                    class="btn btn-primary"
                    disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <span class="spinner-container">
                            <LoadingSpinner Size="small" />
                        </span>
                    }
                    Analyze Logs
                </button>
                
                <button 
                    type="button" 
                    class="btn btn-success"
                    disabled="@_isLoading"
                    @onclick="HandleDetectAnomalies">
                    @if (_isAnomalyLoading)
                    {
                        <span class="spinner-container">
                            <LoadingSpinner Size="small" />
                        </span>
                    }
                    Detect Anomalies
                </button>
                
                <button 
                    type="button" 
                    class="btn btn-info"
                    disabled="@_isLoading"
                    @onclick="HandleSummarizeLogs">
                    @if (_isSummaryLoading)
                    {
                        <span class="spinner-container">
                            <LoadingSpinner Size="small" />
                        </span>
                    }
                    Summarize Logs
                </button>
                
                <button 
                    type="button" 
                    class="btn btn-secondary"
                    @onclick="HandleLoadLabels"
                    disabled="@_isLabelsLoading">
                    @if (_isLabelsLoading)
                    {
                        <span class="spinner-container">
                            <LoadingSpinner Size="small" />
                        </span>
                    }
                    Load Labels
                </button>
            </div>
        </EditForm>
        
        @if (_errorMessage != null)
        {
            <div class="error-message">
                @_errorMessage
            </div>
        }
    </div>
    
    @if (_labels.Any())
    {
        <div class="card">
            <h2 class="card-title">Available Labels</h2>
            <div class="labels-container">
                @foreach (var label in _labels)
                {
                    <span class="label">@label</span>
                }
            </div>
        </div>
    }
    
    @if (_result != null && _result.Success)
    {
        <div class="card">
            <h2 class="card-title">Analysis Results</h2>
            
            <div class="result-item">
                <strong>Query:</strong> @_result.Query
            </div>
            
            <div class="result-item">
                <strong>Time Range:</strong> @_result.TimeRange
            </div>
            
            <div class="result-item">
                <strong>Log Sample Count:</strong> @_result.LogSampleCount
            </div>
            
            <div class="analysis-content">
                <div class="prose">
                    @((MarkupString)Markdig.Markdown.ToHtml(_result.Analysis))
                </div>
            </div>
        </div>
    }
    else if (_result != null && !_result.Success)
    {
        <div class="error-message">
            Analysis failed: @_result.ErrorMessage
        </div>
    }
</div>

@code {
    private class QueryParameters
    {
        public string LogQuery { get; set; } = "{app=\"anomalie-detection\"}";
        public string AnalysisPrompt { get; set; } = "Analyze these logs and provide insights";
        public DateTime StartDate { get; set; } = DateTime.Today;
        public int StartHour { get; set; } = 0;
        public int StartMinute { get; set; } = 0;
        public int LogLimit { get; set; } = 100;
    }

    private QueryParameters _queryParams = new();
    private LogAnalysisResult? _result;
    private List<string> _labels = new();
    private string? _errorMessage;
    private bool _isLoading;
    private bool _isAnomalyLoading;
    private bool _isSummaryLoading;
    private bool _isLabelsLoading;

    protected override void OnInitialized()
    {
        var startTime = new DateTimeOffset(
            _queryParams.StartDate.Year,
            _queryParams.StartDate.Month,
            _queryParams.StartDate.Day,
            _queryParams.StartHour,
            _queryParams.StartMinute,
            0,
            DateTimeOffset.Now.Offset);

        _queryParams.StartDate = DateTime.Now.AddHours(-1);
        _queryParams.StartHour = DateTime.Now.AddHours(-1).Hour;
    }

    private async Task HandleSubmit()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;

            var startTime = new DateTimeOffset(
                _queryParams.StartDate.Year,
                _queryParams.StartDate.Month,
                _queryParams.StartDate.Day,
                _queryParams.StartHour,
                _queryParams.StartMinute,
                0,
                DateTimeOffset.Now.Offset);

            _result = await LogAnalysisService.AnalyzeLogsAsync(
                _queryParams.LogQuery,
                _queryParams.AnalysisPrompt,
                startTime,
                null,
                _queryParams.LogLimit
            );
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error analyzing logs: {ex.Message}";
            _result = null;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleDetectAnomalies()
    {
        try
        {
            _isAnomalyLoading = true;
            _errorMessage = null;

            var startTime = new DateTimeOffset(
                _queryParams.StartDate.Year,
                _queryParams.StartDate.Month,
                _queryParams.StartDate.Day,
                _queryParams.StartHour,
                _queryParams.StartMinute,
                0,
                DateTimeOffset.Now.Offset);

            _result = await LogAnalysisService.DetectAnomaliesAsync(
                _queryParams.LogQuery,
                startTime,
                null,
                _queryParams.LogLimit
            );
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error detecting anomalies: {ex.Message}";
            _result = null;
        }
        finally
        {
            _isAnomalyLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSummarizeLogs()
    {
        try
        {
            _isSummaryLoading = true;
            _errorMessage = null;

            var startTime = new DateTimeOffset(
                _queryParams.StartDate.Year,
                _queryParams.StartDate.Month,
                _queryParams.StartDate.Day,
                _queryParams.StartHour,
                _queryParams.StartMinute,
                0,
                DateTimeOffset.Now.Offset);

            _result = await LogAnalysisService.SummarizeLogsAsync(
                _queryParams.LogQuery,
                startTime,
                null,
                _queryParams.LogLimit
            );
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error summarizing logs: {ex.Message}";
            _result = null;
        }
        finally
        {
            _isSummaryLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleLoadLabels()
    {
        try
        {
            _isLabelsLoading = true;
            _errorMessage = null;

            var labelsResponse = await LokiClient.GetLabelsAsync();

            if (labelsResponse.Status == "success")
            {
                _labels = labelsResponse.Data;
            }
            else
            {
                _errorMessage = "Failed to load labels from Loki";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading labels: {ex.Message}";
        }
        finally
        {
            _isLabelsLoading = false;
            StateHasChanged();
        }
    }
}